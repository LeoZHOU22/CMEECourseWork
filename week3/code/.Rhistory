}
# Create and save subplots for each variable
create_subplots(df, 'log_predator_mass', 'Pred_Subplots.pdf')
create_subplots(df, 'log_prey_mass', 'Prey_Subplots.pdf')
create_subplots(df, 'log_size_ratio', 'SizeRatio_Subplots.pdf')
# Part 3: Calculate Statistics
# Calculating log mean and median for predator mass, prey mass, and size ratio by feeding type
results <- df %>%
group_by(Type.of.feeding.interaction) %>%
summarise(
mean_log_predator_mass = mean(log_predator_mass, na.rm = TRUE),
median_log_predator_mass = median(log_predator_mass, na.rm = TRUE),
mean_log_prey_mass = mean(log_prey_mass, na.rm = TRUE),
median_log_prey_mass = median(log_prey_mass, na.rm = TRUE),
mean_log_size_ratio = mean(log_size_ratio, na.rm = TRUE),
median_log_size_ratio = median(log_size_ratio, na.rm = TRUE)
) %>%
pivot_longer(cols = -Type.of.feeding.interaction, names_to = "Statistic", values_to = "Value")
# Save the statistics to a CSV file in the Data directory
write_csv(results, "../results/PP_Results.csv")
ggplot(df, aes(x = log_predator_mass))+
geom_density(aes(fill = Type.of.feeding.interaction))+
scale_fill_viridis_d(guide="none", option = "plasma", alpha = 0.4)+
facet_wrap(~ Type.of.feeding.interaction, ncol = 1, strip.position = "right")+
theme_classic()+
ggsave("../plots/1.pdf", device = "pdf")
library(ggplot2)
ggplot(df, aes(x = log_predator_mass))+
geom_density(aes(fill = Type.of.feeding.interaction))+
scale_fill_viridis_d(guide="none", option = "plasma", alpha = 0.4)+
facet_wrap(~ Type.of.feeding.interaction, ncol = 1, strip.position = "right")+
theme_classic()+
ggsave("../plots/1.pdf", device = "pdf")
s<-ggplot(df, aes(x = log_predator_mass))+
geom_density(aes(fill = Type.of.feeding.interaction))+
scale_fill_viridis_d(guide="none", option = "plasma", alpha = 0.4)+
facet_wrap(~ Type.of.feeding.interaction, ncol = 1, strip.position = "right")+
theme_classic()+
s<-ggplot(df, aes(x = log_predator_mass))+
geom_density(aes(fill = Type.of.feeding.interaction))+
scale_fill_viridis_d(guide="none", option = "plasma", alpha = 0.4)+
facet_wrap(~ Type.of.feeding.interaction, ncol = 1, strip.position = "right")+
theme_classic()+
print(s)
s<-ggplot(df, aes(x = log_predator_mass))+
geom_density(aes(fill = Type.of.feeding.interaction))+
scale_fill_viridis_d(guide="none", option = "plasma", alpha = 0.4)+
facet_wrap(~ Type.of.feeding.interaction, ncol = 1, strip.position = "right")+
theme_classic()+
print(s)
ggplot(df, aes(x = log_predator_mass))+
geom_density(aes(fill = Type.of.feeding.interaction))+
scale_fill_viridis_d(guide="none", option = "plasma", alpha = 0.4)+
facet_wrap(~ Type.of.feeding.interaction, ncol = 1, strip.position = "right")+
theme_classic()+
print()
ggplot(df, aes(x = log_predator_mass))+
geom_density(aes(fill = Type.of.feeding.interaction))+
scale_fill_viridis_d(guide="none", option = "plasma", alpha = 0.4)+
facet_wrap(~ Type.of.feeding.interaction, ncol = 1, strip.position = "right")+
theme_classic()+
getwd
getwd
getwd()
ggplot(df, aes(x = log_predator_mass))+
geom_density(aes(fill = Type.of.feeding.interaction))+
scale_fill_viridis_d(guide="none", option = "plasma", alpha = 0.4)+
facet_wrap(~ Type.of.feeding.interaction, ncol = 1, strip.position = "right")+
theme_classic()+
ggsave("../plots/1.pdf", device = "pdf")
create_subplots(df, 'log_prey_mass', 'Prey_Subplots.pdf')
create_subplots(df, 'log_size_ratio', 'SizeRatio_Subplots.pdf')
create_density_plots <- function(data, variable, file_name) {
p <- ggplot(data, aes_string(x = variable, fill = "Type.of.feeding.interaction")) +
geom_density(alpha = 0.7) +
facet_wrap(~Type.of.feeding.interaction, scales = "free") +
theme_minimal() +
labs(x = paste("Log of", variable), y = "Density") +
theme(legend.position = "none")
ggsave(file.path("../Plots", file_name), p, width = 14, height = 8)
}
# Create and save density plots for each variable
create_density_plots(df, 'log_predator_mass', 'Pred_Density_Subplots1.pdf')
create_density_plots <- function(data, variable, file_name) {
p <- ggplot(data, aes_string(x = variable, fill = "Type.of.feeding.interaction")) +
geom_density(alpha = 0.7) +
facet_wrap(~Type.of.feeding.interaction, scales = "free") +
theme_minimal() +
labs(x = paste("Log of", variable), y = "Density") +
theme(legend.position = "none")
ggsave(file.path("../plots", file_name), p, width = 14, height = 8)
}
# Create and save density plots for each variable
create_density_plots(df, 'log_predator_mass', 'Pred_Density_Subplots1.pdf')
# Create and save density plots for each variable
create_density_plots(df, 'log_predator_mass', 'Pred_Density_Subplots.pdf')
create_density_plots(df, 'log_prey_mass', 'Prey_Density_Subplots.pdf')
create_density_plots(df, 'log_size_ratio', 'SizeRatio_Density_Subplots.pdf')
ggplot(df, aes(x = log_predator_mass))+
geom_density(aes(fill = Type.of.feeding.interaction))+
scale_fill_viridis_d(guide="none", option = "plasma", alpha = 0.4)+
facet_wrap(~ Type.of.feeding.interaction, ncol = 1, strip.position = "right")+
theme_classic()+
ggsave("../plots/1.pdf", device = "pdf")
library(tidyverse)
# Set the path to the dataset and read it
df <- read_csv("../data/EcolArchives-E089-51-D1.csv")
# Add a new variable for log predator and prey mass
df <- df %>%
mutate(log_predator_mass = log(Predator.mass),
log_prey_mass = log(Prey.mass))
# Initialize a list to store regression results
regress_results <- list()
# Function to perform regression and plot
perform_regression <- function(data, feeding_type, life_stage) {
# Filter the data for the given feeding type and life stage
filtered_data <- data %>%
filter(Type.of.feeding.interaction == feeding_type,
Predator.lifestage == life_stage)
# Perform linear regression
fit <- lm(log_prey_mass ~ log_predator_mass, data = filtered_data)
# Store the summary statistics
regress_results[[paste(feeding_type, life_stage, sep = "_")]] <- summary(fit)
# Plot
p <- ggplot(filtered_data, aes(x = log_predator_mass, y = log_prey_mass)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(title = paste("Regression of Log Prey Mass on Log Predator Mass\n",
"Feeding Type:", feeding_type, "- Life Stage:", life_stage),
x = "Log Predator Mass (g)", y = "Log Prey Mass (g)")
return(p)
}
# Create a PDF file to save the plots
pdf("../results/PP_Regress_Plots.pdf", width = 11, height = 8.5)
# Unique combinations of feeding type and life stage
for(feeding_type in unique(df$Type.of.feeding.interaction)) {
for(life_stage in unique(df$Predator.lifestage)) {
# Create the plot and print it to the PDF
plot <- perform_regression(df, feeding_type, life_stage)
print(plot)
}
}
# Unique combinations of feeding type and life stage
for(feeding_type in unique(df$Type.of.feeding.interaction)) {
for(life_stage in unique(df$Predator.lifestage)) {
# Create the plot and print it to the PDF
plot <- perform_regression(df, feeding_type, life_stage)
print(plot)
}
}
# Function to perform regression and plot
perform_regression <- function(data, feeding_type, life_stage) {
# Filter the data for the given feeding type and life stage
filtered_data <- data %>%
filter(Type.of.feeding.interaction == feeding_type,
Predator.lifestage == life_stage)
# Perform linear regression
fit <- lm(log_prey_mass ~ log_predator_mass, data = filtered_data)
# Store the summary statistics
regress_results[[paste(feeding_type, life_stage, sep = "_")]] <- summary(fit)
# Plot
p <- ggplot(filtered_data, aes(x = log_predator_mass, y = log_prey_mass)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(title = paste("Regression of Log Prey Mass on Log Predator Mass\n",
"Feeding Type:", feeding_type, "- Life Stage:", life_stage),
x = "Log Predator Mass (g)", y = "Log Prey Mass (g)")
return(p)
}
# Unique combinations of feeding type and life stage
for(feeding_type in unique(df$Type.of.feeding.interaction)) {
for(life_stage in unique(df$Predator.lifestage)) {
# Create the plot and print it to the PDF
plot <- perform_regression(df, feeding_type, life_stage)
print(plot)
}
}
# Function to perform regression and plot
perform_regression <- function(data, feeding_type, life_stage) {
# Filter the data for the given feeding type and life stage
filtered_data <- data %>%
filter(Type.of.feeding.interaction == feeding_type,
Predator.lifestage == life_stage) %>%
drop_na(log_predator_mass, log_prey_mass) # Drop rows with NA in these columns
# Proceed only if there are enough cases
if (nrow(filtered_data) > 0) {
# Perform linear regression
fit <- lm(log_prey_mass ~ log_predator_mass, data = filtered_data)
# Store the summary statistics
regress_results[[paste(feeding_type, life_stage, sep = "_")]] <- summary(fit)
# Plot
p <- ggplot(filtered_data, aes(x = log_predator_mass, y = log_prey_mass)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(title = paste("Regression of Log Prey Mass on Log Predator Mass\n",
"Feeding Type:", feeding_type, "- Life Stage:", life_stage),
x = "Log Predator Mass (g)", y = "Log Prey Mass (g)")
return(p)
} else {
# Return NULL or an informative placeholder if there's no data to plot
return(NULL)
}
}
# Create a PDF file to save the plots
pdf("../results/PP_Regress_Plots.pdf", width = 11, height = 8.5)
# Unique combinations of feeding type and life stage
for(feeding_type in unique(df$Type.of.feeding.interaction)) {
for(life_stage in unique(df$Predator.lifestage)) {
# Create the plot and print it to the PDF
plot <- perform_regression(df, feeding_type, life_stage)
print(plot)
}
}
dev.off() # Close the PDF device
# Save regression results to a dataframe and then to CSV
regress_df <- map_df(regress_results, ~{
data.frame(
FeedingTypeLifeStage = names(.),
Slope = coef(.)[2],
Intercept = coef(.)[1],
R_Squared = summary(.)$r.squared,
F_Statistic = summary(.)$fstatistic[1],
P_Value = pf(summary(.)$fstatistic[1], summary(.)$fstatistic[2], summary(.)$fstatistic[3], lower.tail = FALSE)
)
}, .id = "id")
write_csv(regress_df, "../results/PP_Regress_Results.csv")
View(regress_df)
View(regress_results)
regress_df <- map_df(regress_results, ~{
data.frame(
FeedingTypeLifeStage = names(.),
Slope = coef(.)[2],
Intercept = coef(.)[1],
R_Squared = summary(.)$r.squared,
F_Statistic = summary(.)$fstatistic[1],
P_Value = pf(summary(.)$fstatistic[1], summary(.)$fstatistic[2], summary(.)$fstatistic[3], lower.tail = FALSE)
)
}, .id = "id")
# Set the path to the dataset and read it
df <- read_csv("../data/EcolArchives-E089-51-D1.csv")
# Add a new variable for log predator and prey mass
df <- df %>%
mutate(log_predator_mass = log(Predator.mass),
log_prey_mass = log(Prey.mass))
# Initialize a list to store regression results
regress_results <- list()
# Function to perform regression and plot
perform_regression <- function(data, feeding_type, life_stage) {
# Filter the data for the given feeding type and life stage
filtered_data <- data %>%
filter(Type.of.feeding.interaction == feeding_type,
Predator.lifestage == life_stage) %>%
drop_na(log_predator_mass, log_prey_mass) # Drop rows with NA in these columns
# Proceed only if there are enough cases
if (nrow(filtered_data) > 0) {
# Perform linear regression
fit <- lm(log_prey_mass ~ log_predator_mass, data = filtered_data)
# Store the summary statistics
regress_results[[paste(feeding_type, life_stage, sep = "_")]] <- summary(fit)
# Plot
p <- ggplot(filtered_data, aes(x = log_predator_mass, y = log_prey_mass)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(title = paste("Regression of Log Prey Mass on Log Predator Mass\n",
"Feeding Type:", feeding_type, "- Life Stage:", life_stage),
x = "Log Predator Mass (g)", y = "Log Prey Mass (g)")
return(p)
} else {
# Return NULL or an informative placeholder if there's no data to plot
return(NULL)
}
}
# Create a PDF file to save the plots
pdf("../results/PP_Regress_Plots.pdf", width = 11, height = 8.5)
# Unique combinations of feeding type and life stage
for(feeding_type in unique(df$Type.of.feeding.interaction)) {
for(life_stage in unique(df$Predator.lifestage)) {
# Create the plot and print it to the PDF
plot <- perform_regression(df, feeding_type, life_stage)
print(plot)
}
}
dev.off() # Close the PDF device
# Save regression results to a dataframe and then to CSV
regress_df <- map_df(regress_results, ~{
data.frame(
FeedingTypeLifeStage = names(.),
Slope = coef(.)[2],
Intercept = coef(.)[1],
R_Squared = summary(.)$r.squared,
F_Statistic = summary(.)$fstatistic[1],
P_Value = pf(summary(.)$fstatistic[1], summary(.)$fstatistic[2], summary(.)$fstatistic[3], lower.tail = FALSE)
)
}, .id = "id")
View(regress_df)
library(tidyverse)
# Set the path to the dataset and read it
df <- read_csv("../data/EcolArchives-E089-51-D1.csv")
# Add a new variable for log predator and prey mass
df <- df %>%
mutate(log_predator_mass = log(Predator.mass),
log_prey_mass = log(Prey.mass))
# Initialize a list to store regression results
regress_results <- list()
# Function to perform regression and plot
perform_regression <- function(data, feeding_type, life_stage) {
# Filter the data for the given feeding type and life stage
filtered_data <- data %>%
filter(Type.of.feeding.interaction == feeding_type,
Predator.lifestage == life_stage) %>%
drop_na(log_predator_mass, log_prey_mass) # Drop rows with NA in these columns
# Proceed only if there are enough cases
if (nrow(filtered_data) > 0) {
# Perform linear regression
fit <- lm(log_prey_mass ~ log_predator_mass, data = filtered_data)
# Store the summary statistics
regress_results[[paste(feeding_type, life_stage, sep = "_")]] <- summary(fit)
# Plot
p <- ggplot(filtered_data, aes(x = log_predator_mass, y = log_prey_mass)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(title = paste("Regression of Log Prey Mass on Log Predator Mass\n",
"Feeding Type:", feeding_type, "- Life Stage:", life_stage),
x = "Log Predator Mass (g)", y = "Log Prey Mass (g)")
return(p)
} else {
# Return NULL or an informative placeholder if there's no data to plot
return(NULL)
}
}
# Create a PDF file to save the plots
pdf("../results/PP_Regress_Plots.pdf", width = 11, height = 8.5)
# Unique combinations of feeding type and life stage
for(feeding_type in unique(df$Type.of.feeding.interaction)) {
for(life_stage in unique(df$Predator.lifestage)) {
# Create the plot and print it to the PDF
plot <- perform_regression(df, feeding_type, life_stage)
print(plot)
}
}
dev.off() # Close the PDF device
# Save regression results to a dataframe and then to CSV
regress_df <- map_df(regress_results, ~{
data.frame(
FeedingTypeLifeStage = names(.),
Slope = coef(.)[2],
Intercept = coef(.)[1],
R_Squared = summary(.)$r.squared,
F_Statistic = summary(.)$fstatistic[1],
P_Value = pf(summary(.)$fstatistic[1], summary(.)$fstatistic[2], summary(.)$fstatistic[3], lower.tail = FALSE)
)
}, .id = "id")
write_csv(regress_df, "../results/PP_Regress_Results.csv")
# Initialize a list to store regression results
regress_results <- list()
# Function to perform regression and plot
perform_regression <- function(data, feeding_type, life_stage) {
# Filter the data for the given feeding type and life stage
filtered_data <- data %>%
filter(Type.of.feeding.interaction == feeding_type,
Predator.lifestage == life_stage) %>%
drop_na(log_predator_mass, log_prey_mass) # Drop rows with NA in these columns
# Proceed only if there are enough cases
if (nrow(filtered_data) > 0) {
# Perform linear regression
fit <- lm(log_prey_mass ~ log_predator_mass, data = filtered_data)
# Store the summary statistics
regress_results[[paste(feeding_type, life_stage, sep = "_")]] <- summary(fit)
# Plot
p <- ggplot(filtered_data, aes(x = log_predator_mass, y = log_prey_mass)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(title = paste("Regression of Log Prey Mass on Log Predator Mass\n",
"Feeding Type:", feeding_type, "- Life Stage:", life_stage),
x = "Log Predator Mass (g)", y = "Log Prey Mass (g)")
return(p)
} else {
# Return NULL or an informative placeholder if there's no data to plot
return(NULL)
}
}
# Create a PDF file to save the plots
pdf("../results/PP_Regress_Plots.pdf", width = 11, height = 8.5)
# Unique combinations of feeding type and life stage
for(feeding_type in unique(df$Type.of.feeding.interaction)) {
for(life_stage in unique(df$Predator.lifestage)) {
# Create the plot and print it to the PDF
plot <- perform_regression(df, feeding_type, life_stage)
print(plot)
}
}
dev.off() # Close the PDF device
# Assuming df is your dataframe
df <- na.omit(df)  # Remove rows with NAs
# Or alternatively handle NAs in a different way
filtered_data <- df %>%
filter(Type.of.feeding.interaction == feeding_type,
Predator.lifestage == life_stage)
print(nrow(filtered_data))  # This should be more than 0
fit <- lm(dependent_variable ~ independent_variable, data = filtered_data)
fit <- lm(log_prey_mass ~ log_predator_mass, data = filtered_data)
library(tidyverse)
# Set the path to the dataset and read it
df <- read_csv("../data/EcolArchives-E089-51-D1.csv")
# Add a new variable for log predator and prey mass
df <- df %>%
mutate(log_predator_mass = log(Predator.mass),
log_prey_mass = log(Prey.mass))
# Initialize a list to store regression results
regress_results <- list()
# Function to perform regression and plot
perform_regression <- function(data, feeding_type, life_stage) {
# Filter the data for the given feeding type and life stage
filtered_data <- data %>%
filter(Type.of.feeding.interaction == feeding_type,
Predator.lifestage == life_stage) %>%
drop_na(log_predator_mass, log_prey_mass) # Drop rows with NA in these columns
# Proceed only if there are enough cases
if (nrow(filtered_data) > 0) {
# Perform linear regression
fit <- lm(log_prey_mass ~ log_predator_mass, data = filtered_data)
# Store the summary statistics
regress_results[[paste(feeding_type, life_stage, sep = "_")]] <- summary(fit)
# Plot
p <- ggplot(filtered_data, aes(x = log_predator_mass, y = log_prey_mass)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(title = paste("Regression of Log Prey Mass on Log Predator Mass\n",
"Feeding Type:", feeding_type, "- Life Stage:", life_stage),
x = "Log Predator Mass (g)", y = "Log Prey Mass (g)")
return(p)
} else {
# Return NULL or an informative placeholder if there's no data to plot
return(NULL)
}
}
perform_regression <- function(data, feeding_type, life_stage) {
# Filter the data for the given feeding type and life stage
filtered_data <- data %>%
filter(Type.of.feeding.interaction == feeding_type,
Predator.lifestage == life_stage) %>%
drop_na(log_predator_mass, log_prey_mass) # Drop rows with NA in these columns
# Proceed only if there are enough cases
if (nrow(filtered_data) > 0) {
# Perform linear regression
fit <- lm(log_prey_mass ~ log_predator_mass, data = filtered_data)
# Store the summary statistics
regress_results[[paste(feeding_type, life_stage, sep = "_")]] <- summary(fit)
# Plot
p <- ggplot(filtered_data, aes(x = log_predator_mass, y = log_prey_mass)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(title = paste("Regression of Log Prey Mass on Log Predator Mass\n",
"Feeding Type:", feeding_type, "- Life Stage:", life_stage),
x = "Log Predator Mass (g)", y = "Log Prey Mass (g)")
return(p)
} else {
# Return NULL or an informative placeholder if there's no data to plot
return(NULL)
}
}
# Store the summary statistics
regress_results[[paste(feeding_type, life_stage, sep = "_")]] <- summary(fit)
# Perform linear regression
fit <- lm(log_prey_mass ~ log_predator_mass, data = filtered_data)
filtered_data <- data %>%
filter(Type.of.feeding.interaction == feeding_type,
Predator.lifestage == life_stage) %>%
drop_na(log_predator_mass, log_prey_mass) #
View(perform_regression)
library(dplyr)
filtered_data <- data %>%
dplyr::filter(Type.of.feeding.interaction == feeding_type,
Predator.lifestage == life_stage) %>%
drop_na(log_predator_mass, log_prey_mass) # Drop rows with NA in these columns
library(tidyverse)
library(dplyr)
# Set the path to the dataset and read it
df <- read_csv("../data/EcolArchives-E089-51-D1.csv")
# Add a new variable for log predator and prey mass
df <- df %>%
mutate(log_predator_mass = log(Predator.mass),
log_prey_mass = log(Prey.mass))
# Initialize a list to store regression results
regress_results <- list()
filtered_data <- data %>%
dplyr::filter(Type.of.feeding.interaction == feeding_type,
Predator.lifestage == life_stage) %>%
drop_na(log_predator_mass, log_prey_mass) # Drop rows with NA in these columns
filtered_data <- dplyr::filter(Type.of.feeding.interaction == feeding_type,
Predator.lifestage == life_stage) %>%
drop_na(log_predator_mass, log_prey_mass) # Drop rows with NA in these columns
filtered_data <- filter(Type.of.feeding.interaction == feeding_type,
Predator.lifestage == life_stage) %>%
drop_na(log_predator_mass, log_prey_mass) # Drop rows with NA in these columns
if (nrow(filtered_data) > 0) {
# Perform linear regression
fit <- lm(log_prey_mass ~ log_predator_mass, data = filtered_data)
regress_results[[paste(feeding_type, life_stage, sep = "_")]] <- summary(fit)
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(tidyr)
# Set the working directory to the parent of "Code"
setwd(dirname(getwd()))
# Load the data
data <- read.csv("Data/predator_prey_data.csv")
# Load the data
data <- read.csv("../data/EcolArchives-E089-51-D1.csv")
dev.off() # Close the PDF device
dev.off() # Close the PDF device
ccc
